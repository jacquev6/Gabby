name: gabby-dev

volumes:
  frontend-cache:
  backend-pip-packages:

services:
  # @todo Run all services with a user having the same UID:GID as the host user
  # (so that files created by the container on the host filesystem are owned by the host user)
  frontend-shell:
    image: gabby-dev_frontend
    build:
      context: ..
      dockerfile: dev-env/frontend/docker/Dockerfile
    volumes:
      - ..:/app
      - frontend-cache:/root/.cache  # For Cypress
      - /tmp/.X11-unix:/tmp/.X11-unix  # Allow running GUI apps in container, displaying on host
    working_dir: /app/frontend
    environment:
      VITE_OPINION_APP_VERSION: dev
      GABBY_ENTRY_POINT_NAME: frontend
    init: true
    command: ["sleep", "infinity"]
  npm-installer:
    image: gabby-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
      - frontend-cache:/root/.cache
    working_dir: /app/frontend
    command: ["npm", "install"]
  pdf-worker-copier:
    image: gabby-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
    working_dir: /app/frontend
    command: ["bash", "-c", "cat src/promise-with-resolvers-polyfill.js node_modules/pdfjs-dist/build/pdf.worker.min.mjs) >src/frontend/public/pdf.worker.min.js"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
  openapi-to-typescript:
    image: gabby-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
    working_dir: /app/frontend
    environment:
      SHELL: bash
    command: ["npx", "chokidar", "../backend/openapi.json", "--initial", "--verbose", "--command", "npx openapi-typescript ../backend/openapi.json --output src/openapi.ts"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
  frontend:
    image: gabby-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
    working_dir: /app/frontend
    environment:
      VITE_OPINION_APP_VERSION: dev
      # VITE_GABBY_UNAVAILABLE_UNTIL: 2024-06-20T17:00:00Z
      GABBY_ENTRY_POINT_NAME: frontend
    command: ["npx", "vite", "--host", "0.0.0.0", "--port", "80", "--strictPort"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
  adapted-builder:
    image: gabby-dev_frontend
    pull_policy: never
    volumes:
      - ..:/app
    working_dir: /app/frontend
    environment:
      GABBY_ENTRY_POINT_NAME: adapted
    command: ["npx", "vite", "build", "--watch", "--mode", "development", "--outDir", "../backend/gabby/templates/adapted", "--emptyOutDir"]
    depends_on:
      npm-installer:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "test", "-f", "/app/backend/gabby/templates/adapted/index.html"]
      interval: 0.5s

  db:
    image: postgres:15
    tmpfs:
      # Avoid creating an anonymous Docker volume on each run (We don't persist data in the dev env)
      - /var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    healthcheck:
      test: ["CMD", "pg_isready", "--timeout=0", "--dbname=db", "--username=admin" ]
      interval: 0.5s

  backend-shell:
    image: gabby-dev_backend
    build:
      context: ..
      dockerfile: dev-env/backend/docker/Dockerfile
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - secrets.env
    init: true
    command: ["sleep", "infinity"]
  pip-installer:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    command: ["pip", "install", "--user", "-r", "requirements.txt"]
  sqlalchemy-data-model-visualizer-patcher:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    command: ["sed", "-i", "s/dot.render(output_file, view=True)/dot.render(output_file, view=False)/", "/root/.local/lib/python3.12/site-packages/sqlalchemy_data_model_visualizer.py"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
  migrator:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend/gabby
    env_file:
      - backend/env
      - secrets.env
    command: ["alembic", "upgrade", "head"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
      db:
        condition: service_healthy
  data-loader:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - secrets.env
    command: ["python", "-m", "gabby", "load-fixtures", "admin-user", "more-test-exercises"]
    depends_on:
      migrator:
        condition: service_completed_successfully
  backend:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - secrets.env
    command: ["uvicorn", "gabby.asgi:app", "--reload", "--host", "0.0.0.0", "--port", "80"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      adapted-builder:
        condition: service_healthy
  db-backup:
    image: gabby-dev_backend
    pull_policy: never
    volumes:
      - ..:/app
      - backend-pip-packages:/root/.local
    working_dir: /app/backend
    env_file:
      - backend/env
      - secrets.env
    init: true
    command: ["bash", "-c", "while true; do python -m gabby backup-database; find /app/dev-env/db/backups -name 'gabby-backup-*.tar.gz' -mmin +10 -delete; sleep 30; done"]
    depends_on:
      pip-installer:
        condition: service_completed_successfully
      data-loader:
        condition: service_completed_successfully

  adminer:
    image: adminer:4

  doc:
    image: gabby-dev_doc
    build:
      context: ..
      dockerfile: dev-env/doc/docker/Dockerfile
    volumes:
      - ..:/app
    working_dir: /app/doc
    environment:
      GABBY_VERSION: dev
    init: true
    command: ["sphinx-autobuild", ".", "/tmp/doc", "--host", "0.0.0.0", "--port", "80"]

  fanout:
    image: nginx:latest
    ports:
      - 8080:8080
    volumes:
      - ./fanout/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - adminer
      - backend
